name: Action Flow Jobs
on:
  repository_dispatch:
  workflow_dispatch:
  # schedule:
  #   - cron: "*/5 * * * *"
  push:
    branches:
      - master
jobs:
  run:
    runs-on: ubuntu-latest
    name: Run
    env:
      CACHE_BRANCH: cache
      LOCAL_CACHE_DIR: .last-build-cache
      CACHE_KEY_FILE: .latest-build-cache-key
      JSON_SECRETS: ${{ toJson(secrets) }}
      JSON_GITHUB: ${{ toJson(github) }}
    steps:
      - uses: actions/checkout@v2
      - name: Dump context
        uses: actions/github-script@v2
        with:
          script: |
            const secrets = JSON.parse(process.env.JSON_SECRETS);
            const githubObj = JSON.parse(process.env.JSON_GITHUB);
            console.log('secrets',secrets)
            console.log('github',JSON.stringify(githubObj,null,2))
      - id: isCacheBranchExist
        name: If cache branch exist
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            return github.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: process.env.CACHE_BRANCH
            }).then(data=>{
              return true;
            }).catch((e)=>{
              if(e && e.status===404){
                return false
              }else{
                core.setFailed('check isDeployBranchExist error: ',e.message)
              }
            })
      - name: Load cache key file from cache branch
        id: last-cache-key-file-loaded
        if: steps.isCacheBranchExist.outputs.result == 'true'
        uses: actions/checkout@v2
        continue-on-error: true
        with:
          ref: ${{ env.CACHE_BRANCH }}
          path: ${{ env.LOCAL_CACHE_DIR }}
      - name: Get last cache key content
        if: ${{ steps.last-cache-key-file-loaded.outcome == 'success' }}
        id: last-cache-key
        run: echo "::set-output name=result::$(cat $LOCAL_CACHE_DIR/$CACHE_KEY_FILE)"
      - name: Restore cache
        uses: actions/cache@v2
        id: restore-cache
        if: ${{ steps.last-cache-key.outcome == 'success' }}
        with:
          key: ${{ runner.os }}-cache-${{ steps.last-cache-key.outputs.result }}
          path: .cache
      - name: Get current cache hash
        id: current-cache-hash
        if: ${{ steps.restore-cache.outcome == 'success' }}
        uses: theowenyoung/folder-hash@v2
        with:
          path: .cache
      - run: yarn
      - run: yarn build
      - name: Install act
        run: curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash
      - name: Run act
        run: act -W ./dist/workflows --secret-file ./dist/.secrets -e ./dist/event.json
      - name: Get latest cache hash
        id: latest-cache-hash
        uses: theowenyoung/folder-hash@v2
        with:
          path: .cache
      - name: upload cache
        if: steps.latest-cache-hash.outputs.hash != steps.current-cache-hash.outputs.result
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-cache-${{ steps.latest-cache-hash.outputs.hash}}
          path: .cache
      - name: Save cache key to file
        if: steps.latest-cache-hash.outputs.hash != steps.current-cache-hash.outputs.result
        run: mkdir ./public && echo ${{ steps.latest-cache-hash.outputs.hash}} > ./public/$CACHE_KEY_FILE
      - name: Push cache branch
        if: steps.latest-cache-hash.outputs.hash != steps.current-cache-hash.outputs.result
        uses: peaceiris/actions-gh-pages@v3.6.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: ${{ env.CACHE_BRANCH }}
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
